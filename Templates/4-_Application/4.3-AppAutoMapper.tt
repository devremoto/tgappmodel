<#@ template language="C#" hostSpecific="true"  #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../main.ttinclude" #>
<#//@ include file="$(SolutionDir)\Packages\T4.TemplateFileManager.2.2.1\tools\ttinc\TemplateFilemanager.CS.ttinclude" #>
<#@ include file="../ClassModel.ttinclude" #>
<#@ output extension=".txt"  #><#
var manager = TemplateFileManager.Create(this);

manager.StartNewFile("AutoMapper\\EntityToModel.cs","Application","",null);
var all = false;
#>
using AutoMapper;
using Application.ViewModels;
using Domain.Entities;
using System.Collections.Generic;

namespace Application.AutoMapper
{
    public class EntityToModel : Profile
    {
        public EntityToModel()
        {
<#foreach(var classModel in classSet.Classes){#>
<# if(classModel.Fields.Any(x=>x.IsClass) && all){ 
var fieldCount =classModel.Fields.Where(x=>x.IsClass).Count()-1;
var i= 0;
#>
			CreateMap<<#=classModel.Name#>, <#=classModel.Name#>ViewModel>()
<#foreach(var field in classModel.Fields.Where(x=>x.IsClass)){#>
<# if(field.IsCollection){ #>
				.ForMember(dest => dest.<#=field.Name#>, opt => opt.MapFrom(src => Mapper.Map<List<<#=field.DataType#>>, List<<#=field.DataType#>ViewModel>>(src.<#=field.Name#>)))<#= i==fieldCount ? ";":"" #>
<#}else{#>
				.ForMember(dest => dest.<#=field.Name#>, opt => opt.MapFrom(src => Mapper.Map<<#=field.DataType#>, <#=field.DataType#>ViewModel>(src.<#=field.Name#>)))<#= i==fieldCount ? ";":"" #>
<#}#>
<#
	i++;
	}
#>
            
<#}else{#>
			CreateMap<<#=classModel.Name#>, <#=classModel.Name#>ViewModel>();
<#}#>
<#}#>
        }
    }
}
<#
manager.EndBlock();
#><#manager.StartNewFile("AutoMapper\\ModelToEntity.cs","Application","",null);
#>
using AutoMapper;
using Application.ViewModels;
using Domain.Entities;
using System.Collections.Generic;

namespace Application.AutoMapper
{
    public class ModelToEntity : Profile
    {
        public ModelToEntity()
        {
<#foreach(var classModel in classSet.Classes){#>
<# if(classModel.Fields.Any(x=>x.IsClass) && all){ 
var fieldCount =classModel.Fields.Where(x=>x.IsClass).Count()-1;
var i= 0;
#>
			CreateMap<<#=classModel.Name#>ViewModel, <#=classModel.Name#>>()
<#foreach(var field in classModel.Fields.Where(x=>x.IsClass)){#>
<# if(field.IsCollection){ #>
				.ForMember(dest => dest.<#=field.Name#>, opt => opt.MapFrom(src => Mapper.Map<List<<#=field.DataType#>ViewModel>, List<<#=field.DataType#>>>(src.<#=field.Name#>)))<#= i==fieldCount ? ";":"" #>
<#}else{#>
				.ForMember(dest => dest.<#=field.Name#>, opt => opt.MapFrom(src => Mapper.Map<<#=field.DataType#>ViewModel, <#=field.DataType#>>(src.<#=field.Name#>)))<#= i==fieldCount ? ";":"" #>
<#}#>
<#
	i++;
	}
#>
            
<#}else{#>
			CreateMap<<#=classModel.Name#>ViewModel, <#=classModel.Name#>>();
<#}#>
<#}#>
        }
    }
}
<#
manager.EndBlock();
#><#

manager.Process(false);
#>